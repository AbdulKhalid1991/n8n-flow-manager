import https from 'https';
import { config } from 'dotenv';

config();

const agent = new https.Agent({
  rejectUnauthorized: false
});

async function fixCriticalEmailConfig() {
  console.log('üîß Fixing Critical Error Email Configuration...');
  
  try {
    // Get current workflow
    const workflow = await getCurrentWorkflow();
    
    // Find the Critical Error Email node
    const emailNode = workflow.nodes.find(node => node.name === 'Critical Error Email');
    
    if (!emailNode) {
      throw new Error('Critical Error Email node not found');
    }
    
    console.log('‚úÖ Found Critical Error Email node');
    console.log('‚ùå Current Issues Found:');
    console.log('   1. Missing TO address');
    console.log('   2. Missing email content (text body)');
    console.log('   3. No SMTP configuration detected');
    
    // Fix the email configuration
    emailNode.parameters = {
      resource: "email",
      operation: "send",
      to: "abdulkhalid.hm@outlook.com", // Using your email from environment
      subject: "üö® CRITICAL Error in {{ $json.workflowName }} - {{ $json.errorId }}",
      text: `CRITICAL ERROR DETECTED IN n8n WORKFLOW

üö® ERROR ALERT - IMMEDIATE ATTENTION REQUIRED

üìã Error Details:
‚Ä¢ Error ID: {{ $json.errorId }}
‚Ä¢ Category: {{ $json.category }}
‚Ä¢ Severity: {{ $json.severity }}
‚Ä¢ Timestamp: {{ $json.timestamp }}

üîß Workflow Context:
‚Ä¢ Workflow: {{ $json.workflowName }}
‚Ä¢ Node: {{ $json.nodeName }}
‚Ä¢ Execution ID: {{ $json.executionId }}
‚Ä¢ Environment: {{ $json.environment }}

‚ùå Error Message:
{{ $json.message }}

üìä Stack Trace:
{{ $json.stack }}

üí° Recovery Suggestions:
{{ $json.recoverySuggestions.join("\\n‚Ä¢ ") }}

üîÑ Recoverable: {{ $json.recoverable ? "‚úÖ Yes" : "‚ùå No" }}

‚ö†Ô∏è This error is marked as CRITICAL and requires immediate attention.

---
Generated by Error Logger Enhanced v2
Workflow URL: https://n8n.srv779128.hstgr.cloud/workflow/gTcn8f7892yrUPRn`,
      
      html: `
<div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
  <div style="background: #dc3545; color: white; padding: 20px; text-align: center;">
    <h1>üö® CRITICAL ERROR ALERT</h1>
    <p>Immediate attention required</p>
  </div>
  
  <div style="padding: 20px; background: #f8f9fa;">
    <h2 style="color: #dc3545;">Error Details</h2>
    <table style="width: 100%; border-collapse: collapse;">
      <tr><td><strong>Error ID:</strong></td><td>{{ $json.errorId }}</td></tr>
      <tr><td><strong>Category:</strong></td><td><span style="background: #dc3545; color: white; padding: 2px 8px; border-radius: 4px;">{{ $json.category }}</span></td></tr>
      <tr><td><strong>Severity:</strong></td><td><span style="background: #dc3545; color: white; padding: 2px 8px; border-radius: 4px;">{{ $json.severity }}</span></td></tr>
      <tr><td><strong>Time:</strong></td><td>{{ $json.timestamp }}</td></tr>
    </table>
  </div>
  
  <div style="padding: 20px; background: white;">
    <h2 style="color: #495057;">Workflow Context</h2>
    <ul>
      <li><strong>Workflow:</strong> {{ $json.workflowName }}</li>
      <li><strong>Node:</strong> {{ $json.nodeName }}</li>
      <li><strong>Execution ID:</strong> {{ $json.executionId }}</li>
    </ul>
  </div>
  
  <div style="padding: 20px; background: #fff3cd; border-left: 4px solid #ffc107;">
    <h3 style="color: #856404;">Error Message</h3>
    <p style="font-family: monospace; background: #f8f9fa; padding: 10px; border-radius: 4px;">{{ $json.message }}</p>
  </div>
  
  <div style="padding: 20px; background: #d1ecf1; border-left: 4px solid #17a2b8;">
    <h3 style="color: #0c5460;">Recovery Suggestions</h3>
    <ul>
      <li>{{ $json.recoverySuggestions.join("</li><li>") }}</li>
    </ul>
  </div>
  
  <div style="padding: 20px; text-align: center; background: #e9ecef;">
    <p><small>Generated by Error Logger Enhanced v2</small></p>
    <p><small>This error requires immediate attention</small></p>
  </div>
</div>`,
      
      options: {
        priority: "high",
        attachments: []
      }
    };
    
    console.log('üîß Updated Critical Error Email configuration:');
    console.log('   ‚úÖ Added recipient email: abdulkhalid.hm@outlook.com');
    console.log('   ‚úÖ Added detailed text content');
    console.log('   ‚úÖ Added HTML formatted content');
    console.log('   ‚úÖ Set high priority');
    
    // Update the workflow
    await updateWorkflow(workflow);
    
    console.log('‚úÖ Critical Error Email successfully configured!');
    console.log('');
    console.log('üéØ Configuration Complete:');
    console.log('   üìß Recipient: abdulkhalid.hm@outlook.com');
    console.log('   üìù Subject: Dynamic with error ID and workflow name');
    console.log('   üìÑ Content: Both text and HTML versions');
    console.log('   ‚ö° Priority: High');
    console.log('');
    console.log('‚ö†Ô∏è  IMPORTANT: SMTP Configuration Required');
    console.log('   1. Go to n8n Settings > Credentials');
    console.log('   2. Add SMTP credentials for email sending');
    console.log('   3. Configure the Critical Error Email node to use SMTP credentials');
    console.log('');
    console.log('üìß Recommended SMTP Settings for Outlook:');
    console.log('   Server: smtp-mail.outlook.com');
    console.log('   Port: 587');
    console.log('   Security: STARTTLS');
    console.log('   Username: abdulkhalid.hm@outlook.com');
    console.log('   Password: [Your App Password]');
    
  } catch (error) {
    console.error('‚ùå Fix failed:', error.message);
  }
}

function getCurrentWorkflow() {
  return new Promise((resolve, reject) => {
    const options = {
      hostname: 'n8n.srv779128.hstgr.cloud',
      path: '/api/v1/workflows/gTcn8f7892yrUPRn',
      method: 'GET',
      headers: {
        'X-N8N-API-KEY': process.env.N8N_API_KEY,
        'Accept': 'application/json'
      },
      agent: agent
    };

    https.request(options, (res) => {
      let data = '';
      res.on('data', (chunk) => data += chunk);
      res.on('end', () => {
        try {
          if (res.statusCode === 200) {
            resolve(JSON.parse(data));
          } else {
            reject(new Error(`HTTP ${res.statusCode}: ${data}`));
          }
        } catch (error) {
          reject(error);
        }
      });
    }).on('error', reject).end();
  });
}

function updateWorkflow(workflow) {
  return new Promise((resolve, reject) => {
    const postData = JSON.stringify(workflow);
    
    const options = {
      hostname: 'n8n.srv779128.hstgr.cloud',
      path: '/api/v1/workflows/gTcn8f7892yrUPRn',
      method: 'PUT',
      headers: {
        'X-N8N-API-KEY': process.env.N8N_API_KEY,
        'Content-Type': 'application/json',
        'Content-Length': Buffer.byteLength(postData)
      },
      agent: agent
    };

    const req = https.request(options, (res) => {
      let data = '';
      res.on('data', (chunk) => data += chunk);
      res.on('end', () => {
        try {
          if (res.statusCode === 200) {
            resolve(JSON.parse(data));
          } else {
            reject(new Error(`HTTP ${res.statusCode}: ${data}`));
          }
        } catch (error) {
          reject(error);
        }
      });
    });
    
    req.on('error', reject);
    req.write(postData);
    req.end();
  });
}

// Run the fix
fixCriticalEmailConfig();